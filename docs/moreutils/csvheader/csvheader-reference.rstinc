

Options TK reference
====================


-A, --add
---------

Add a header row of generic, numbered column names, starting from 1, e.g. field_1, field_2, and so on.


-B, --bash
----------

Bash (i.e. completely replace) the current header row with generic column names, e.g. field_1, field_2.


-C, --create <column_names>
---------------------------

Similar to ``--add``, but specify column names with a comma-delimited string, e.g. ``'ID,cost,"Name, proper"'``


-R, --rename <renamed_header_pairs>
-----------------------------------

Rename individual columns. The required argument is a comma-delimited string of pipe-delimited pairs â€” column id/name and the new name.

For example, to rename the "a" column to "Apples"; and also, the 2nd and 3rd columns to "hello" and "world", respectively, the quoted argument string would be:

::

    'a|Apples,2|hello,3|world'


-S, --slugify
-------------

Converts the existing column names to snake_case style. For example, ``APPLES`` and  ``'Date - Time '`` are converted, respectively, to ``'apples'`` and ``'date_time'``.


-X, --regex <pattern> <replacement>
-----------------------------------

In the existing column names, replace all occurrences of a regular expression *<pattern>* with *<replacement>*.



-P, --preview
-------------

When no options are invoked, only the existing header is printed as a comma-delimited list. Invoking any of the aforementioned options prints the transformed header *and* the data. In the latter case, use the ``--preview`` flag to see only what the transformed headers look like.

