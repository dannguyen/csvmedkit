
How csvheader compares to existing tools TK
===========================================




Compared to adding a header row with ``csvformat --no-header-row``
------------------------------------------------------------------


::

    $ echo '1,2,3,4' | csvformat --no-header-row
    a,b,c,d
    1,2,3,4


::

    $ echo '1,2,3,4' | csvheader --add
    field_1,field_2,field_3,field_4
    1,2,3,4


.. note:: csvformat 1.0.6 bug

    In the latest official release of csvkit — 1.0.6 — csvformat's ``-H/--no-header-row`` does not work as expected. See issue/pull request `here <https://github.com/wireservice/csvkit/pull/1095>`_. (TODO: update this if csvkit master is patched)


Compared to listing column names with ``csvcut --names``
--------------------------------------------------------

TK Lorem ipsum dolor sit amet, consectetur adipisicing elit


::

    $ echo 'a,b, c ,d  ' | csvcut --names
      1: a
      2: b
      3:  c
      4: d


In contrast, because ``csvheader`` outputs the header as CSV, its output can be piped into, say, ``csvformat``, which, if you want, *can* produce quoted values to make the whitespace more obvious::


    $ echo 'a,b, c ,d  ' | csvheader | csvformat -U 1
    "index","field"
    "1","a"
    "2","b"
    "3"," c "
    "4","d  "


Compared to listing column names with ``xsv headers``
-----------------------------------------------------

::

    $ echo 'a,b, c ,d  ' | xsv headers
    1   a
    2   b
    3    c
    4   d


Compared to replacing the first line of data with ``sed``
---------------------------------------------------------

It's possible to use :command:`sed` to `replace the entire first line <https://superuser.com/a/1026686>`_ of input::

    $ sed '1s/.*/alpha,bravo,charlie/' examples/heady.csv

    alpha,bravo,charlie
    100,cats,Iowa
    200,dogs,Ohio

However, this invocation of :command:`sed` will not work on multi-line headers (which is admittedly, an edge-case).

But ``sed`` can't be used to selectively rename headers — it can only do string replacement. For example, to rename *only* the 1st column requires tailoring a specific regex::

    $ sed '1s/^A/alpha/' examples/heady.csv

    alpha, B Sharps ,"SEA, shells!"
    100,cats,Iowa
    200,dogs,Ohio


Renaming only the 1st *and* 3rd columns gets very messy::


    $ sed -e '1s/^A/alpha/' -e '1s/"SEA.*/charlie/' examples/heady.csv

    alpha, B Sharps ,charlie
    100,cats,Iowa
    200,dogs,Ohio


In contrast, ``csvheader --rename`` allows for renaming columns by (1-based) index::

    $ csvheader --rename '1|alpha,3|charlie' examples/heady.csv


    alpha, B Sharps ,charlie
    100,cats,Iowa
    200,dogs,Ohio


